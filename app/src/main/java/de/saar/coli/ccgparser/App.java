/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.saar.coli.ccgparser;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Joiner;
import de.saar.coli.ccgparser.rules.CombinatoryRule;
import de.up.ling.tree.Tree;
import me.tongfei.progressbar.ProgressBar;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Locale;

public class App {
    private static class PrintingStatisticsListener implements Parser.StatisticsListener  {
        private PrintWriter pw;

        public PrintingStatisticsListener(String filename) throws IOException {
            this.pw = new PrintWriter(new FileWriter(filename));
            pw.printf("Sentence\tLength\tTime (ms)\tParsed");
            for(CombinatoryRule rule : Parser.COMBINATORY_RULES ) {
                pw.printf("\t%s", rule.getSymbol());
            }
            pw.println();
        }

        @Override
        public void accept(Parser.SentenceStatistics stats) {
            pw.printf(Locale.US, "%s\t%d\t%.2f\t%s", stats.sentence, stats.length, stats.parsingTimeNano/1000000.0, Boolean.toString(stats.couldParse));
            for(CombinatoryRule rule : Parser.COMBINATORY_RULES ) {
                pw.printf("\t%d", stats.ruleCounts.get(rule));
            }
            pw.println();
        }

        @Override
        public void close() {
            pw.close();
        }
    }

    private static final String PARSES_FILENAME = "parses.txt";
    private static final String STATISTICS_FILENAME = "statistics.tsv";

    public static void main(String[] args) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        String supertagsFilename = args[0];
        System.err.printf("Reading supertags from %s.\n", supertagsFilename);
        WordWithSupertags[][] allTaggedSentences = mapper.readValue(new File(supertagsFilename), WordWithSupertags[][].class);

        // ASSUMPTION - supertags for each word are presented in order of descending score (best first)
        for( WordWithSupertags[] sentence : allTaggedSentences ) {
            for( WordWithSupertags word : sentence ) {
                int i = 0;
                for( SupertagWithScore tag : word.supertags ) {
                    tag.setPositionInSupertagList(i++);
                }
            }
        }

        UnaryRules unaryRules = UnaryRules.load(new File("unary_rules.txt"));

        int numSentences = 0;
        int parsedSentences = 0;
        PrintWriter pw = new PrintWriter(new FileWriter(PARSES_FILENAME));
        Parser.StatisticsListener listener = new PrintingStatisticsListener("statistics.tsv");


        try (ProgressBar pb = new ProgressBar("Parsing", allTaggedSentences.length)) {
            for (WordWithSupertags[] sentence : allTaggedSentences) {
//                System.err.printf("[%04d] %.100s\n", numSentences+1, Joiner.on(" ").join(sentence));
                Parser parser = new Parser(sentence, unaryRules);
                parser.addStatisticsListener(listener);
                Tree<String> parseTree = parser.parse();

                numSentences++;
                if (parseTree != null) {
                    parsedSentences++;
                }

                pw.println(parseTree == null ? "<null>" : parseTree.toString());
                pb.step();

//                break;

//                if( parseTree != null ) {
//                    parseTree.draw().setVisible(true);
//                    break;
//                }
            }
        }

        pw.close();
        listener.close();

        System.err.printf("\nManaged to parse %d out of %d sentences (%.1f%%).\n", parsedSentences, numSentences, ((double) parsedSentences * 100)/numSentences);
        System.err.printf("Parses are in %s, statistics are in %s.\n", PARSES_FILENAME, STATISTICS_FILENAME);

//
//
//        Tree<String> parseTree = null;
//
//        for( int i = 0; i < 1; i++ ) {
//            long start = System.nanoTime();
//            Parser parser = new Parser(allTaggedSentences[0], unaryRules);
//            parseTree = parser.parse();
//            long end = System.nanoTime();
//            System.err.printf("%d Î¼s\n", (end-start)/1000);
//        }
//
//        System.err.println(parseTree);
//        if( parseTree != null ) {
//            parseTree.draw().setVisible(true);
//        }
    }
}
